# -*- coding: utf-8 -*-
"""credit_scoring.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wtz-Pwvk-NvF-NokTPE16Vp3KUw2oxpr

Подключаемся к БД.
"""

!mkdir -p ~/.postgresql && \
wget "https://storage.yandexcloud.net/cloud-certs/CA.pem" \
    --output-document ~/.postgresql/root.crt && \
chmod 0600 ~/.postgresql/root.crt

!sudo apt update && sudo apt install --yes python3 python3-pip && \
!pip3 install psycopg2-binary

import psycopg2

conn = psycopg2.connect("""
    host=rc1b-70q90cunwkzx49mj.mdb.yandexcloud.net
    port=6432
    sslmode=verify-full
    dbname=db_clients
    user=mlhs_student
    password=mlhs_student
    target_session_attrs=read-write
""")

"""Получаем данные и смотрим на них."""

import pandas as pd

query = "SELECT * from public.credit_scoring"
data = pd.read_sql_query(query, conn)

conn.close()

data.head()

"""Сохраняем данные датасета"""

data.to_csv("cred_scor_data.csv", index=False)

"""Описание таблицы"""

data.shape

data.dtypes

"""Разведовательный анализ"""

len(data)

"""Пропущенные значения"""

data.isna().sum()

"""обработка пропусков (MonthlyIncome and NumberOfDependents)"""

data.MonthlyIncome.value_counts()

"""ищем медиану и заполняем пропуски"""

median = data['MonthlyIncome'].median()
#print(median)

data['MonthlyIncome'].fillna(median, inplace=True)

data.NumberOfDependents.value_counts()

median = data['NumberOfDependents'].median()
#print(median)

data['NumberOfDependents'].fillna(median, inplace=True)

data.isna().sum()

"""Описание таблицы"""

data.describe()

"""Нужно предсказать значение SeriousDlqin2yrs. Там может быть 0 или 1"""

data['SeriousDlqin2yrs'].value_counts()

"""Матрица корреляции"""

corr = data.corr() # строим матрицу корреляций

corr.style.background_gradient(cmap='coolwarm')

data = data.drop(['NumberOfTime30-59DaysPastDueNotWorse','NumberOfTime60-89DaysPastDueNotWorse'],axis=1)

corr = data.corr() #строим матрицу корреляции
corr.style.background_gradient(cmap='coolwarm') #зависимость/корреляция

"""Визуализация данных"""

import matplotlib.pyplot as plt

plt.scatter(data['NumberOfTimes90DaysLate'], data['SeriousDlqin2yrs'], c=data['SeriousDlqin2yrs'])

data.groupby('SeriousDlqin2yrs')['NumberOfTimes90DaysLate'].mean()

"""Обучение модели"""

X = data.drop('SeriousDlqin2yrs', axis=1)
y = data['SeriousDlqin2yrs']

"""Разобъём данные на train и test (test — 25% от всех данных)"""

from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.25, random_state=42)

X.head

"""Маштабироование признакоов"""

import pandas as pd
from sklearn.preprocessing import StandardScaler

ss = StandardScaler()
ss.fit(Xtrain)

Xtrain = pd.DataFrame(ss.transform(Xtrain), columns=X.columns)
Xtest = pd.DataFrame(ss.transform(Xtest), columns=X.columns)

Xtrain.head()

"""Обучим логистическую регрессию на train и сделаем предсказание на новых для нее данных (test)."""

from sklearn.linear_model import LogisticRegression

model = LogisticRegression() # объявление модели
model.fit(Xtrain, ytrain) # обучение модели

pred_test = model.predict(Xtest) # предсказание классов

pred_test[:5]

accuracy_score(ytest, pred_test)

y.value_counts()

pred_test[:20]

"""Валидация"""

from sklearn.metrics import confusion_matrix

confusion_matrix(ytest, pred_test)

ytest.value_counts()

from sklearn.metrics import recall_score

recall_score(ytest, pred_test)

probs = model.predict_proba(Xtest)

probs[:10]

"""Изменим порог вероятности"""

probs_Dql90 = probs[:,1]

classes = probs_Dql90 > 0.1

confusion_matrix(ytest, classes)

ytest.value_counts()

recall_score(ytest, classes)

"""Интерпретация модели"""

model.coef_, model.intercept_

import pandas as pd

coef_table = pd.DataFrame({'features' : list(X.columns), 'weights' : list(model.coef_[0])})

coef_table.sort_values(by='weights')

"""Метод ближайших соседей"""

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier()

knn.fit(Xtrain, ytrain)

pred_test2 = knn.predict_proba(Xtest)[:,1]

classes2 = pred_test2 > 0.2

confusion_matrix(ytest, classes2)

"""Сохранение"""

Xtest['predictions'] = probs_Dql90

Xtest[['predictions']].to_csv("PredictionsDql90.csv", index=False)

import pickle 

with open('model.pickle', 'wb') as f:
    pickle.dump(model, f)

# а так модель можно загрузить из файла:  
# with open('filename.pickle', 'rb') as f:
#     model = pickle.load(f)